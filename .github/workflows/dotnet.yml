name: Build & Test

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      
      - name: Restore Packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: dotnet restore _ALL.sln --use-lock-file
      
      - name: Build
        run: |
          msbuild -m -t:Rebuild -p:Configuration=Release -bl:opc-ua-pubsub-dotnet.binlog -noconlog _All.sln
          gci env:* | sort Name | Format-Table -AutoSize | Out-String -Width 400 | Write-Host
          $sourceFolder = Join-Path $env:GITHUB_WORKSPACE "src" | Join-Path -ChildPath "_Out" | Join-Path -ChildPath "Release" | Join-Path -ChildPath "*"
          $outFolder = Join-Path $env:GITHUB_WORKSPACE "src" | Join-Path -ChildPath "_Out" | Join-Path -ChildPath "GitHub" 
          New-Item -ItemType Directory -Force -Path $outFolder
          $outPath = Join-Path $outFolder "win-x64.zip"          
          Compress-Archive -DestinationPath $outPath -Path $sourceFolder -CompressionLevel Optimal
      
      - name: Env
        run: |
          gci env:* | sort Name | Format-Table -AutoSize | Out-String -Width 400 | Write-Host

      - name: Archive Build Log
        uses: actions/upload-artifact@v2
        if: ${{ success() || failure() }}
        with:
          name: log-win-x64-release
          path: |
            src/*.binlog
      
      - name: Archive Build Result
        uses: actions/upload-artifact@v2
        with:
          name: win-x64-release
          path: |
            src/_Out/GitHub

      - name: Create Nuget Packages
        run: |
          $packageOutFolder = Join-Path $env:GITHUB_WORKSPACE "src" | Join-Path -ChildPath "_Out" | Join-Path -ChildPath "NuGet"
          dotnet pack _ALL.sln --no-build --configuration Release --output $packageOutFolder

      - name: Archive NuGet Packages
        uses: actions/upload-artifact@v2
        with:
          name: nuget-win-x64-release
          path: |
            src/_Out/NuGet
          

      - name: Test
        run: |
          Write-Host "Using vswhere to find VSTest..."
          $baseFolder = vswhere -latest -products * -requires Microsoft.VisualStudio.Workload.ManagedDesktop Microsoft.VisualStudio.Workload.Web -requiresAny -property installationPath
          Write-Host "baseFolder: $baseFolder"
          $vsTestPath = join-path $baseFolder 'Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe'
          Write-Host "vsTestPath: $vsTestPath"
          Test-Path $vsTestPath
          Write-Host "Searching for test assemblies..."
          $testRootPath = Join-Path $env:GITHUB_WORKSPACE "src" | Join-Path -ChildPath "Tests"
          $testAssemblies = Get-ChildItem -Directory -Recurse -Path $testRootPath -Include "bin" | Get-ChildItem -File -Recurse -Filter "*.Test.dll" | select -ExpandProperty FullName | % { "`"$_`"" }
          Write-Host "Found test assemblies:"
          Write-Host $testAssemblies 
          & $vsTestPath $testAssemblies

  release:
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download Build Results
        uses: actions/download-artifact@v2
        with:
          name: win-x64-release

      - name: Download NuGet Packages
        uses: actions/download-artifact@v2
        with:
          name: nuget-win-x64-release

      - name: Publish to NuGet.org
        run: |
          dotnet nuget push "*.nupkg" --api-key 